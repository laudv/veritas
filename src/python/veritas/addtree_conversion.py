# Copyright 2023 DTAI Research Group - KU Leuven.
# License: Apache License 2.0
# Authors: Alexander Schoeters, Laurens Devos

from . import AddTree

class InapplicableAddTreeConverter(Exception):
    pass

class NoRegisteredConverterException(Exception):
    pass

class AddTreeConverter:
    """ AddTreeConverter Base Interface

    Interface that gives the opportunity to implement a conversion from one's
    own model to Veritas' represention of tree ensembles.

    The function to implement is ``get_addtree(model)``. The converter then
    needs to be added to the convertermanager using
    ``add_addtree_converter()``.

    For an example see :ref:`Model Conversion implementation`.
    """

    def convert(self, model):
        """ Convert the given model to an `AddTree`

        This method throws an `InapplicableAddTreeConverter` if the given model
        is not of the right type.
        """
        raise NotImplementedError()
    
    def test_conversion(self, model):
        """ Check the correctness of generated `AddTree`.

        Test whether the outputs of `AddTree` generated by `get_addtree` match
        the original models outputs.
        """
        raise NotImplementedError()


class AddTreeConverterRegistry:
    def __init__(self):
        self._converters = []

    def add_converter(self, converter):
        assert isinstance(converter, AddTreeConverter)

        # Append to the from of the list so this new converter takes precedence
        self._converters.insert(0, converter)

    def get_addtree(self, model):
        for converter in self._converters:
            try:
                addtree = converter.convert(model)
                assert isinstance(addtree, AddTree)
                return addtree
            except InapplicableAddTreeConverter:
                pass

        raise NoRegisteredConverterException(
                f"No conversion possible for model of type `{type(model)}`. "
                "Implement an `veritas.AddTreeConverter` and add it using "
                "`veritas.add_addtree_converter`.")

_converter_registry = AddTreeConverterRegistry()

def add_addtree_converter(converter):
    """
    Adds an instance of AddTreeConverter to the `converter_manager`. The
    `get_addtree` function will now also use the added converter.

    :param converter: Instance of AddTreeConverter
    :type converter: AddTreeConverter
    """
    _converter_registry.add_converter(converter)

def get_addtree(model):
    """Convert the given model to a Veritas `AddTree`.

    This will try each registered `AddTreeConverter` known to Veritas. There
    are default converters for XGBoost, LightGBM, and scikit-learn random
    forests.

    Add your own custom converters by implementing a `veritas.AddTreeConverter`
    and adding it to the registry using `veritas.add_addtree_converter`.

    If no converter is registered for the given `model`, this function will
    throw a `NoRegisteredConverterException` exception.

    :param model: model that needs to be converted to a Veritas tree ensemble
    :rtype: AddTree
    """
    return _converter_registry.get_addtree(model)
